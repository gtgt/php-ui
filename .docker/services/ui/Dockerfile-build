	FROM gcc:latest as builder
	RUN : Pre-reqs										\
		&&	apt-get update								\
		&&	apt-get install -y --no-install-recommends	\
			meson ninja-build							\
			libgtk-3-dev								\
		&&	true										;
	
	WORKDIR			/usr/src/libui
	COPY	libui	.
	
	# Cheat sheet
	#	ARG name[=default]	# build-time only
	#	ENV name=set		#	run-time image persisted
	#	… ${name:-default}	#	any-time, any-where
	#	… ${name:+whenSet}	#	any-time, any-where
	
	# Failed attempt at colorizing meson/ninja in d-c build - f*ck it
	ARG		TERM=xterm-256color
	ENV		TERM=${TERM:-xterm-256color}
#	RUN	  : TERM=${TERM} # debug
	ENV		DEBUG_COLORS=true
	
	RUN : Build														\
		&&	meson setup --wipe	build								\
		&&	ninja -v -C			build								\
		&&	ninja -v -C			build install						\
		&&	ninja -v -C			build -t	compdb					\
			#cspell:ignore					compdb					#
				>				build/compile_commands.json			\
		&&	true													;

# Re "builder" stage: The following php image obviously contains enough of
#	buildkit to build libui (`apt install meson ninja-build` aside) but I'll
#	keep the stage separate to ease removal of dep on ui/../libui
# TODO: look into using separate Dockerfile
#	(multiple like `docker-compose -f 0 -f n`)

#	FROM php:7-cli
	FROM INCLUDE:php-Dockerfile
	
	RUN docker-php-source extract
	
	RUN : Base reqs													\
		&& apt-get			update									\
		&& apt-get			install -y --no-install-recommends		\
			libgtk-3-dev											\
		&& true														;
	
	RUN : Extra reqs												\
		&& apt-get			update									\
		&& apt-get			install -y --no-install-recommends		\
			gawk													\
			bbe														\
			bc														\
			source-highlight										\
		&& apt-get			install -y --no-install-recommends		\
			npm														\
		&&	npm install -g diff-so-fancy							\
		&& true														;
	
	RUN : Optional "complex" tools									\
		#
		&&	apt-get			update									\
		&&	apt-get			install -y --no-install-recommends		\
									gdb								\
									clang							\
									clangd							\
			#cspell:ignore			clangd							#
			python3-pip												\
		&&			pip		install	compiledb						\
			#cspell:ignore			compiledb						#
		#
#		# For running .docker/services/ui/Dockerfile-build.sh		#
#		&&	apt-get			update									\
#		&&	apt-get			install -y --no-install-recommends		\
#			subversion												\
#		#
#		# For stepping in C debugger								# (`sudo pear ...` for system domain in non-root devcontainer; also note `pear config-...` as I still see it like https://pear.php.net/bugs/bug.php?id=13123 said to be fixed 2008 but next to only hit on https://www.google.com/search?q="config-set"+"failed,+channel+pecl.php.net")
#		&&			pear	config-set		temp_dir /usr/src/pecl	\
#		&&	(cd "$(	pear	config-get		temp_dir		)"	\
#			&&		pecl	bundle			xdebug				)	\
		#
		# Common							Xdebug (PHP)			#
		&&			pecl	install			xdebug					\
			#cspell:ignore pecl										#
#		&&	 docker-php-ext-enable			xdebug					\
		# I'll control it w/ args "-d", "zend_extension=xdebug" in .vscode/{tasks,launch}.json instead
		#	(manual: enable w/ `sudo -E docker-php-ext-enable xdebug`
		#		and	disable by `sudo rm /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini`)
		#
		# For rebuilding libui.			Alternative manual install:	 sudo apt update && sudo apt install meson ninja-build # meson is req'd also in some `meson --internal symbolextractor` run by `ninja -C build`
		&&	apt-get			update									\
		&&	apt-get			install -y --no-install-recommends		\
			meson ninja-build										\
		#															#
		&&	true													;
	
	RUN : Optional "simple" tools									\
		&&	apt-get			update									\
		&&	apt-get			install -y --no-install-recommends		\
			less													\
			vim														\
		#	vIm should prolly be considered complex for some but	#
		#		my uses are rather simple (I mainly use vsCode)		#
		&&	true													;
	
	COPY --from=builder	/usr/src/libui/build/meson-out/libui.so.0	/usr/local/lib/x86_64-linux-gnu/
	RUN ln -s										   libui.so.0	/usr/local/lib/x86_64-linux-gnu/libui.so
	COPY --from=builder	/usr/src/libui/ui_unix.h					/usr/local/include/
	COPY --from=builder	/usr/src/libui/ui.h							/usr/local/include/
	
	# For testing example like /usr/lib-src/libui/build/meson-out/histogram
	RUN mkdir -p													/usr/src
	COPY --from=builder	/usr/src/libui								/usr/src/libui
	
	#cspell:ignore devcontainer nonroot moby buildkit autoremove
	ENV DEVCONTAINER=ui/.devcontainer
	
	# I'm having trouble getting this picked up when running `docker-compose build`:
	# docker-compose.yml build: args: USERNAME: vscode
	ARG USERNAME=vscode
	# but NOTE that, even with above and next `ARG USERNAME=automatic` commented-out,
	# I still only get it working with:
	#
	# NB: `docker-compose build --build-arg USERNAME=vscode`
	
	# BEG vsCode remote container add existing - docker from compose
	
	# [Option] Install zsh
	ARG INSTALL_ZSH="true"
	# [Option] Upgrade OS packages to their latest versions
	ARG UPGRADE_PACKAGES="false"
	# [Option] Enable non-root Docker access in container
	ARG ENABLE_NONROOT_DOCKER="true"
	# [Option] Use the OSS Moby CLI instead of the licensed Docker CLI
	ARG USE_MOBY="true"

	# Enable new "BUILDKIT" mode for Docker CLI
	ENV DOCKER_BUILDKIT=1

	# Install needed packages and setup non-root user. Use a separate RUN statement to add your
	# own dependencies. A user of "automatic" attempts to reuse an user ID if one already exists.
#	ARG USERNAME=automatic
	ARG USER_UID=1000
	ARG USER_GID=$USER_UID
	COPY $DEVCONTAINER/library-scripts/*.sh /tmp/library-scripts/
	# edited prev & next(2)
	RUN : $DEVCONTAINER/library-scripts \
		&& apt-get update \
		&& /bin/bash /tmp/library-scripts/common-debian.sh "${INSTALL_ZSH}" "${USERNAME}" "${USER_UID}" "${USER_GID}" "${UPGRADE_PACKAGES}" "true" "true" \
		# Use Docker script from script library to set things up
		&& /bin/bash /tmp/library-scripts/docker-debian.sh "${ENABLE_NONROOT_DOCKER}" "/var/run/docker-host.sock" "/var/run/docker.sock" "${USERNAME}" \
		# Clean up
		&& apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/* /tmp/library-scripts/

	# Setting the ENTRYPOINT to docker-init.sh will configure non-root access 
	# to the Docker socket. The script will also execute CMD as needed.
	ENTRYPOINT [ "/usr/local/share/docker-init.sh" ]
	
	# END vsCode remote container add existing - docker from compose
	
	# next USERNAME: see above
	# BEG https://code.visualstudio.com/remote/advancedcontainers/avoid-extension-reinstalls
	
	RUN mkdir -p /home/$USERNAME/.vscode-server/extensions \
			/home/$USERNAME/.vscode-server-insiders/extensions \
		&& chown -R $USERNAME \
			/home/$USERNAME/.vscode-server \
			/home/$USERNAME/.vscode-server-insiders
	
	# END https://code.visualstudio.com/remote/advancedcontainers/avoid-extension-reinstalls
	
	# next SHOULD not be relevant at build-time
	ARG DISPLAY=host.docker.internal:0
	ENV DISPLAY=${DISPLAY:-host.docker.internal:0}
	
	WORKDIR				/usr/src/ui
	
	CMD [ "sleep", "infinity" ]
	
